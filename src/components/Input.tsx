import { useState } from "react";

/**
 * label: 라벨
 * value: 값
 * onChange: 값 변경 이벤트
 * placeholder: 플레이스홀더
 * type: 타입
 * isRequired: 필수 여부
 * isErr: 에러 여부
 * errMsg: 에러 메시지
 * isConfirm: Confirm 타입 Input 여부(초록색 Input)
 * confirmMsg: Confirm 타입 Input 메시지(초록색 Input 메시지)
 * children: Input 오른쪽 자식 요소
 * disabled: 비활성화 여부
 * maxLength: 최대 길이
 * onKeyDown: 키 다운 이벤트
 * onKeyUp: 키 업 이벤트
 * onFocus: 포커스 이벤트
 * onBlur: 블러 이벤트
 * isPassword: 비밀번호 입력 필드 여부
 */
interface PropsType {
    label?: string;
    value: any;
    onChange: (e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>) => void;
    placeholder: string;
    type: string;
    isRequired?: boolean;
    isErr?: boolean;
    errMsg?: string;
    isConfirm?: boolean;
    confirmMsg?: string;
    children?: React.ReactNode;
    disabled?: boolean;
    maxLength?: number;
    onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUp?: React.KeyboardEventHandler<HTMLInputElement>;
    onFocus?: React.FocusEventHandler<HTMLInputElement>;
    onBlur?: React.FocusEventHandler<HTMLInputElement>;
    isPassword?: boolean;
}

export default function Input({
    label = "",
    value,
    onChange,
    placeholder,
    type,
    isErr = false,
    errMsg,
    isRequired = false,
    isConfirm = false,
    confirmMsg,
    children,
    disabled = false,
    maxLength,
    onKeyDown,
    onKeyUp,
    onFocus,
    onBlur,
    isPassword = false,
}: PropsType) {
    const [showPassword, setShowPassword] = useState(false);

    const togglePasswordVisibility = () => {
        setShowPassword(!showPassword);
    };

    const renderPasswordIcon = () => {
        if (!isPassword) return children;

        return showPassword ? (
            <svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="cursor-pointer" onClick={togglePasswordVisibility}>
                <path
                    d="M23.9157 11.6962C23.8822 11.6222 23.0714 9.86062 21.269 8.09531C18.8674 5.74312 15.834 4.5 12.4953 4.5C9.15653 4.5 6.12314 5.74312 3.72151 8.09531C1.91908 9.86062 1.1045 11.625 1.07483 11.6962C1.03129 11.7922 1.00879 11.896 1.00879 12.0009C1.00879 12.1059 1.03129 12.2097 1.07483 12.3056C1.10833 12.3797 1.91908 14.1403 3.72151 15.9056C6.12314 18.2569 9.15653 19.5 12.4953 19.5C15.834 19.5 18.8674 18.2569 21.269 15.9056C23.0714 14.1403 23.8822 12.3797 23.9157 12.3056C23.9592 12.2097 23.9817 12.1059 23.9817 12.0009C23.9817 11.896 23.9592 11.7922 23.9157 11.6962ZM12.4953 18C9.54898 18 6.97505 16.9509 4.84431 14.8828C3.97004 14.0313 3.22623 13.0603 2.63603 12C3.22608 10.9396 3.9699 9.9686 4.84431 9.11719C6.97505 7.04906 9.54898 6 12.4953 6C15.4416 6 18.0155 7.04906 20.1462 9.11719C21.0222 9.9684 21.7676 10.9394 22.3593 12C21.6691 13.2619 18.6626 18 12.4953 18ZM12.4953 7.5C11.5865 7.5 10.6982 7.76392 9.94265 8.25839C9.18707 8.75285 8.59817 9.45566 8.25041 10.2779C7.90266 11.1002 7.81167 12.005 7.98896 12.8779C8.16624 13.7508 8.60383 14.5526 9.2464 15.182C9.88896 15.8113 10.7076 16.2399 11.5989 16.4135C12.4902 16.5872 13.414 16.4981 14.2535 16.1575C15.0931 15.8169 15.8107 15.2401 16.3155 14.5001C16.8204 13.76 17.0899 12.89 17.0899 12C17.0886 10.8069 16.6041 9.66303 15.7427 8.81939C14.8814 7.97575 13.7134 7.50124 12.4953 7.5ZM12.4953 15C11.8895 15 11.2972 14.8241 10.7935 14.4944C10.2898 14.1648 9.8972 13.6962 9.66537 13.1481C9.43353 12.5999 9.37287 11.9967 9.49106 11.4147C9.60925 10.8328 9.90098 10.2982 10.3294 9.87868C10.7577 9.45912 11.3035 9.1734 11.8977 9.05764C12.4919 8.94189 13.1077 9.0013 13.6674 9.22836C14.2272 9.45542 14.7055 9.83994 15.0421 10.3333C15.3787 10.8266 15.5583 11.4067 15.5583 12C15.5583 12.7956 15.2356 13.5587 14.6612 14.1213C14.0867 14.6839 13.3076 15 12.4953 15Z"
                    fill="#8F95B2"
                />
            </svg>
        ) : (
            <svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="cursor-pointer" onClick={togglePasswordVisibility}>
                <path
                    d="M5.44627 3.24557C5.37902 3.17132 5.29739 3.11089 5.20612 3.06777C5.11485 3.02465 5.01575 2.9997 4.91456 2.99437C4.81338 2.98904 4.71211 3.00343 4.61665 3.03671C4.52118 3.06999 4.4334 3.1215 4.35841 3.18825C4.28342 3.255 4.2227 3.33566 4.17977 3.42556C4.13684 3.51546 4.11256 3.61282 4.10833 3.71198C4.1041 3.81114 4.12 3.91014 4.15513 4.00323C4.19025 4.09633 4.24389 4.18167 4.31293 4.25432L6.1546 6.239C2.67802 8.32869 1.18287 11.5499 1.11682 11.6962C1.07328 11.7921 1.05078 11.8959 1.05078 12.0009C1.05078 12.1058 1.07328 12.2096 1.11682 12.3056C1.15032 12.3796 1.96108 14.1403 3.7635 15.9056C6.16513 18.2568 9.19852 19.4999 12.5373 19.4999C14.2532 19.5095 15.9517 19.1635 17.5214 18.4846L19.6273 20.7543C19.6945 20.8286 19.7762 20.889 19.8674 20.9321C19.9587 20.9752 20.0578 21.0002 20.159 21.0055C20.2602 21.0108 20.3614 20.9965 20.4569 20.9632C20.5524 20.9299 20.6402 20.8784 20.7151 20.8116C20.7901 20.7449 20.8509 20.6642 20.8938 20.5743C20.9367 20.4844 20.961 20.3871 20.9652 20.2879C20.9695 20.1887 20.9536 20.0897 20.9184 19.9966C20.8833 19.9036 20.8297 19.8182 20.7606 19.7456L5.44627 3.24557ZM9.97673 10.3556L13.9654 14.654C13.3648 14.9635 12.6762 15.0688 12.0078 14.9535C11.3394 14.8381 10.729 14.5086 10.2725 14.0167C9.81605 13.5248 9.53932 12.8983 9.48578 12.2356C9.43224 11.573 9.60493 10.9117 9.97673 10.3556ZM12.5373 17.9999C9.59098 17.9999 7.01704 16.9509 4.8863 14.8828C4.01172 14.0315 3.26787 13.0604 2.67802 11.9999C3.12695 11.1759 4.55989 8.86963 7.2104 7.37057L8.93337 9.22213C8.26633 10.0589 7.92279 11.0996 7.96347 12.1604C8.00414 13.2212 8.42643 14.2338 9.15567 15.0192C9.88492 15.8045 10.8742 16.3121 11.9486 16.4522C13.023 16.5923 14.1133 16.3558 15.027 15.7846L16.4369 17.3034C15.1925 17.771 13.8701 18.0072 12.5373 17.9999ZM13.1116 9.05338C12.912 9.01608 12.7358 8.90268 12.6216 8.73812C12.5075 8.57355 12.4647 8.37131 12.5028 8.17588C12.5409 7.98045 12.6567 7.80784 12.8247 7.69602C12.9927 7.5842 13.1992 7.54233 13.3987 7.57963C14.3747 7.76494 15.2634 8.2543 15.9322 8.97471C16.601 9.69512 17.0141 10.608 17.1098 11.5771C17.1287 11.7752 17.0666 11.9725 16.9369 12.1256C16.8073 12.2787 16.6209 12.3752 16.4187 12.3937C16.3948 12.3951 16.3709 12.3951 16.3469 12.3937C16.1555 12.3945 15.9708 12.3251 15.829 12.1991C15.6873 12.0731 15.5989 11.8997 15.5812 11.7131C15.5167 11.0684 15.2416 10.4614 14.7966 9.9822C14.3517 9.50301 13.7607 9.17725 13.1116 9.05338ZM23.9548 12.3056C23.9146 12.3937 22.945 14.4965 20.7616 16.4118C20.687 16.4793 20.5994 16.5317 20.504 16.5657C20.4085 16.5998 20.3071 16.6149 20.2056 16.6102C20.1041 16.6055 20.0046 16.581 19.9129 16.5383C19.8212 16.4956 19.739 16.4354 19.6713 16.3612C19.6035 16.2871 19.5515 16.2005 19.5183 16.1065C19.485 16.0125 19.4712 15.9129 19.4776 15.8136C19.484 15.7143 19.5106 15.6173 19.5556 15.5281C19.6007 15.439 19.6635 15.3595 19.7402 15.2943C20.8114 14.3518 21.7112 13.2378 22.4013 11.9999C21.8101 10.9385 21.0647 9.96677 20.1882 9.11525C18.0575 7.049 15.4835 5.99994 12.5373 5.99994C11.9165 5.9992 11.2967 6.04843 10.6841 6.14713C10.5845 6.16438 10.4824 6.16213 10.3837 6.14051C10.2849 6.11889 10.1916 6.07833 10.1089 6.02117C10.0263 5.96401 9.95607 5.89138 9.90227 5.80747C9.84847 5.72357 9.81218 5.63006 9.79548 5.53234C9.77879 5.43463 9.78203 5.33464 9.80502 5.23815C9.82801 5.14167 9.87029 5.0506 9.92942 4.97021C9.98855 4.88982 10.0634 4.8217 10.1495 4.76979C10.2357 4.71787 10.3315 4.6832 10.4314 4.66775C11.1274 4.55519 11.8318 4.49906 12.5373 4.49994C15.876 4.49994 18.9094 5.74307 21.311 8.09525C23.1134 9.86057 23.9242 11.6221 23.9577 11.6962C24.0012 11.7921 24.0237 11.8959 24.0237 12.0009C24.0237 12.1058 24.0012 12.2096 23.9577 12.3056H23.9548Z"
                    fill="#8F95B2"
                />
            </svg>
        );
    };

    return (
        <div className="flex-1">
            {label !== "" && (
                <div className="mb-2 text-sm font-medium text-n800">
                    {label}
                    {isRequired && <span className="text-taskmateRed">*</span>}
                </div>
            )}

            {/** disabled 상태의 우선순위 높게 주는 방법이 이거밖에 안보이는데.. */}
            <div
                className={`w-full h-[46px] flex gap-2 rounded border px-3 border-n400 
                    ${disabled ? "bg-n200 border-n400" : isErr ? "border-red" : isConfirm ? "border-green" : value ? "border-n700" : "has-[:focus]:border-n700"}`}
            >
                <input
                    className="flex-1 h-full border-none text-sm text-n800 focus:outline-none placeholder:text-n600"
                    type={isPassword ? (showPassword ? "text" : "password") : type}
                    value={value}
                    onChange={onChange}
                    placeholder={placeholder}
                    disabled={disabled}
                    onKeyDown={onKeyDown}
                    onKeyUp={onKeyUp}
                    onFocus={onFocus}
                    onBlur={onBlur}
                    maxLength={maxLength}
                />
                <div className="h-full flex flex-col justify-center">{renderPasswordIcon()}</div>
            </div>
            {isErr && <div className="text-red text-xs mt-2">{errMsg}</div>}
            {isConfirm && <div className="text-green text-xs mt-2">{confirmMsg}</div>}
        </div>
    );
}
